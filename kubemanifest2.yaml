apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml --volumes hostPath -o kubemanifest2.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: mavenapp
    name: mavenapp
  spec:
    ports:
    - name: "8084"
      port: 8084
      targetPort: 8082
    - name: "8085"
      port: 8085
      targetPort: 8083
    selector:
      io.kompose.service: mavenapp
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml --volumes hostPath -o kubemanifest2.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: springapp
    name: springapp
  spec:
    ports:
    - name: "8082"
      port: 8082
      targetPort: 8082
    - name: "8083"
      port: 8083
      targetPort: 8083
    selector:
      io.kompose.service: springapp
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml --volumes hostPath -o kubemanifest2.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: mavenapp
    name: mavenapp
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: mavenapp
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert -f docker-compose.yml --volumes hostPath -o
            kubemanifest2.yaml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/appsandmonitornetwork: "true"
          io.kompose.network/databasenetwork: "true"
          io.kompose.service: mavenapp
      spec:
        containers:
        - image: mavenapp
          imagePullPolicy: ""
          name: mavenjava3
          ports:
          - containerPort: 8082
          - containerPort: 8083
          resources: {}
        hostname: mavenjava3
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: appsandmonitornetwork
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/appsandmonitornetwork: "true"
    podSelector:
      matchLabels:
        io.kompose.network/appsandmonitornetwork: "true"
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: databasenetwork
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/databasenetwork: "true"
    podSelector:
      matchLabels:
        io.kompose.network/databasenetwork: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml --volumes hostPath -o kubemanifest2.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: mavenmonitor
    name: mavenmonitor
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: mavenmonitor
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert -f docker-compose.yml --volumes hostPath -o
            kubemanifest2.yaml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/appsandmonitornetwork: "true"
          io.kompose.service: mavenmonitor
      spec:
        containers:
        - image: monitormaven2
          imagePullPolicy: ""
          name: mavenmonitor
          resources: {}
          volumeMounts:
          - mountPath: /myApp/myLogs
            name: C
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - hostPath:
            path: C:\Users\tomasz.koltun\exampleapi\stage2\monitors\mavenMonitors\myLogs
          name: C
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: appsandmonitornetwork
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/appsandmonitornetwork: "true"
    podSelector:
      matchLabels:
        io.kompose.network/appsandmonitornetwork: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml --volumes hostPath -o kubemanifest2.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: reportcontainer
    name: reportcontainer
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: reportcontainer
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert -f docker-compose.yml --volumes hostPath -o
            kubemanifest2.yaml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.service: reportcontainer
      spec:
        containers:
        - image: reporter
          imagePullPolicy: ""
          name: reportcontainer
          resources: {}
          volumeMounts:
          - mountPath: /logs
            name: C
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - hostPath:
            path: C:\Users\tomasz.koltun\exampleapi\stage2\monitors\mavenMonitors\myLogs
          name: C
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml --volumes hostPath -o kubemanifest2.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: springapp
    name: springapp
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: springapp
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert -f docker-compose.yml --volumes hostPath -o
            kubemanifest2.yaml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/appsandmonitornetwork: "true"
          io.kompose.network/databasenetwork: "true"
          io.kompose.service: springapp
      spec:
        containers:
        - args:
          - /bin/sh
          - ../scripts/parametersScript.sh
          image: reloadapi:0.0.1
          imagePullPolicy: ""
          name: springjava3
          ports:
          - containerPort: 8082
          - containerPort: 8083
          resources: {}
          volumeMounts:
          - mountPath: /log
            name: C
          - mountPath: /conf
            name: C
          - mountPath: /cert
            name: C
          - mountPath: /scripts
            name: C
        hostname: springjava3
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - hostPath:
            path: C:\Users\tomasz.koltun\exampleapi\Users\tomasz.koltun\exampleapi\log
          name: C
        - hostPath:
            path: C:\Users\tomasz.koltun\exampleapi\Users\tomasz.koltun\exampleapi\conf
          name: C
        - hostPath:
            path: C:\Users\tomasz.koltun\exampleapi\Users\tomasz.koltun\exampleapi\cert
          name: C
        - hostPath:
            path: C:\Users\tomasz.koltun\exampleapi\Users\tomasz.koltun\exampleapi\scripts
          name: C
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: appsandmonitornetwork
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/appsandmonitornetwork: "true"
    podSelector:
      matchLabels:
        io.kompose.network/appsandmonitornetwork: "true"
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: databasenetwork
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/databasenetwork: "true"
    podSelector:
      matchLabels:
        io.kompose.network/databasenetwork: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f docker-compose.yml --volumes hostPath -o kubemanifest2.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: springmonitor
    name: springmonitor
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: springmonitor
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose convert -f docker-compose.yml --volumes hostPath -o
            kubemanifest2.yaml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.network/appsandmonitornetwork: "true"
          io.kompose.service: springmonitor
      spec:
        containers:
        - image: monitorspring2
          imagePullPolicy: ""
          name: springmonitor
          resources: {}
          volumeMounts:
          - mountPath: /log
            name: C
          - mountPath: /conf
            name: C
          - mountPath: /cert
            name: C
          - mountPath: /scripts
            name: C
          - mountPath: /myLogs
            name: C
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - hostPath:
            path: C:\Users\tomasz.koltun\exampleapi\Users\tomasz.koltun\exampleapi\log
          name: C
        - hostPath:
            path: C:\Users\tomasz.koltun\exampleapi\Users\tomasz.koltun\exampleapi\conf
          name: C
        - hostPath:
            path: C:\Users\tomasz.koltun\exampleapi\Users\tomasz.koltun\exampleapi\cert
          name: C
        - hostPath:
            path: C:\Users\tomasz.koltun\exampleapi\Users\tomasz.koltun\exampleapi\scripts
          name: C
        - hostPath:
            path: C:\Users\tomasz.koltun\exampleapi\stage2\monitors\mavenMonitors\myLogs
          name: C
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: appsandmonitornetwork
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/appsandmonitornetwork: "true"
    podSelector:
      matchLabels:
        io.kompose.network/appsandmonitornetwork: "true"
kind: List
metadata: {}

